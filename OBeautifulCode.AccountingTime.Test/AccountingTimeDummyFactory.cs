// --------------------------------------------------------------------------------------------------------------------
// <copyright file="AccountingTimeDummyFactory.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.AccountingTime.Test source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.AccountingTime.Test
{
    using System;

    using AutoFakeItEasy;

    using FakeItEasy;

    using OBeautifulCode.Math.Recipes;

    /// <summary>
    /// A Dummy Factory for types in <see cref="AccountingTime"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeRecipesProject
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class AccountingTimeDummyFactory : DefaultAccountingTimeDummyFactory
    {
        private const int MinYear = 1950;

        private const int MaxYear = 2050;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingTimeDummyFactory"/> class.
        /// </summary>
        public AccountingTimeDummyFactory()
        {
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(FiftyTwoFiftyThreeWeekMethodology.Unknown);

            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<AccountingPeriodSystem>();

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var result = new FiscalYearAccountingPeriodSystem(A.Dummy<MonthOfYear>().ThatIsNot(MonthOfYear.December));

                    return result;
                });

            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(DayOfMonth.Invalid);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(MonthNumber.Invalid);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(MonthOfYear.Invalid);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(QuarterNumber.Invalid);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(UnitOfTimeKind.Invalid);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(UnitOfTimeGranularity.Invalid);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(ReportingPeriodComponent.Invalid);

            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<UnitOfTime>();
            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<CalendarUnitOfTime>();
            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<FiscalUnitOfTime>();
            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<GenericUnitOfTime>();

            AutoFixtureBackedDummyFactory.UseRandomInterfaceImplementationForDummy<IHaveAMonth>();
            AutoFixtureBackedDummyFactory.UseRandomInterfaceImplementationForDummy<IHaveAQuarter>();
            AutoFixtureBackedDummyFactory.UseRandomInterfaceImplementationForDummy<IHaveAYear>();
            AutoFixtureBackedDummyFactory.UseRandomInterfaceImplementationForDummy<IAmBoundedTime>();
            AutoFixtureBackedDummyFactory.UseRandomInterfaceImplementationForDummy<IAmUnboundedTime>();

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var year = ThreadSafeRandom.Next(MinYear, MaxYear + 1);
                    var result = new GenericMonth(year, A.Dummy<MonthNumber>());
                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var year = ThreadSafeRandom.Next(MinYear, MaxYear + 1);
                    var result = new GenericQuarter(year, A.Dummy<QuarterNumber>());
                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var year = ThreadSafeRandom.Next(MinYear, MaxYear + 1);
                    var result = new GenericYear(year);
                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var year = ThreadSafeRandom.Next(MinYear, MaxYear + 1);
                    var result = new FiscalMonth(year, A.Dummy<MonthNumber>());
                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var year = ThreadSafeRandom.Next(MinYear, MaxYear + 1);
                    var result = new FiscalQuarter(year, A.Dummy<QuarterNumber>());
                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var year = ThreadSafeRandom.Next(MinYear, MaxYear + 1);
                    var result = new FiscalYear(year);
                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    while (true)
                    {
                        try
                        {
                            var date = A.Dummy<DateTime>();
                            var year = ThreadSafeRandom.Next(MinYear, MaxYear + 1);
                            var result = new CalendarDay(year, (MonthOfYear)date.Month, (DayOfMonth)date.Day);
                            return result;
                        }
                        catch (ArgumentException)
                        {
                        }
                    }
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var year = ThreadSafeRandom.Next(MinYear, MaxYear + 1);
                    var result = new CalendarMonth(year, A.Dummy<MonthOfYear>());
                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var year = ThreadSafeRandom.Next(MinYear, MaxYear + 1);
                    var result = new CalendarQuarter(year, A.Dummy<QuarterNumber>());
                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var year = ThreadSafeRandom.Next(MinYear, MaxYear + 1);
                    var result = new CalendarYear(year);
                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var baseComponent = A.Dummy<UnitOfTime>();

                    if (baseComponent is IAmUnboundedTime)
                    {
                        var otherComponent = A.Dummy<UnitOfTime>().ThatIs(_ => _.UnitOfTimeKind == baseComponent.UnitOfTimeKind);

                        return ThreadSafeRandom.Next(0, 2) == 0
                            ? new ReportingPeriod(baseComponent, otherComponent)
                            : new ReportingPeriod(otherComponent, baseComponent);
                    }
                    else
                    {
                        var startComponent = baseComponent;

                        var endComponent = (UnitOfTime)AD.ummy(startComponent.GetType());

                        return startComponent <= endComponent
                            ? new ReportingPeriod(startComponent, endComponent)
                            : new ReportingPeriod(endComponent, startComponent);
                    }
                });
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="CalendarUnitOfTime"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyCalendarReportingPeriod()
        {
            var result = A.Dummy<ReportingPeriod>().Whose(_ => _.GetUnitOfTimeKind() == UnitOfTimeKind.Calendar);

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="FiscalUnitOfTime"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyFiscalReportingPeriod()
        {
            var result = A.Dummy<ReportingPeriod>().Whose(_ => _.GetUnitOfTimeKind() == UnitOfTimeKind.Fiscal);

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="GenericUnitOfTime"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyGenericReportingPeriod()
        {
            var result = A.Dummy<ReportingPeriod>().Whose(_ => _.GetUnitOfTimeKind() == UnitOfTimeKind.Generic);

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="CalendarDay"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyCalendarDayReportingPeriod()
        {
            var result = A.Dummy<ReportingPeriod>().Whose(_ => (_.GetUnitOfTimeKind() == UnitOfTimeKind.Calendar) && (!_.HasComponentWithUnboundedGranularity()) && (_.GetUnitOfTimeGranularity() == UnitOfTimeGranularity.Day));

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="CalendarMonth"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyCalendarMonthReportingPeriod()
        {
            var result = A.Dummy<ReportingPeriod>().Whose(_ => (_.GetUnitOfTimeKind() == UnitOfTimeKind.Calendar) && (!_.HasComponentWithUnboundedGranularity()) && (_.GetUnitOfTimeGranularity() == UnitOfTimeGranularity.Month));

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="CalendarQuarter"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyCalendarQuarterReportingPeriod()
        {
            var result = A.Dummy<ReportingPeriod>().Whose(_ => (_.GetUnitOfTimeKind() == UnitOfTimeKind.Calendar) && (!_.HasComponentWithUnboundedGranularity()) && (_.GetUnitOfTimeGranularity() == UnitOfTimeGranularity.Quarter));

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="CalendarYear"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyCalendarYearReportingPeriod()
        {
            var result = A.Dummy<ReportingPeriod>().Whose(_ => (_.GetUnitOfTimeKind() == UnitOfTimeKind.Calendar) && (!_.HasComponentWithUnboundedGranularity()) && (_.GetUnitOfTimeGranularity() == UnitOfTimeGranularity.Year));

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="CalendarUnbounded"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyCalendarUnboundedReportingPeriod()
        {
            var result = new ReportingPeriod(new CalendarUnbounded(), new CalendarUnbounded());

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="FiscalMonth"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyFiscalMonthReportingPeriod()
        {
            var result = A.Dummy<ReportingPeriod>().Whose(_ => (_.GetUnitOfTimeKind() == UnitOfTimeKind.Fiscal) && (!_.HasComponentWithUnboundedGranularity()) && (_.GetUnitOfTimeGranularity() == UnitOfTimeGranularity.Month));

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="FiscalQuarter"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyFiscalQuarterReportingPeriod()
        {
            var result = A.Dummy<ReportingPeriod>().Whose(_ => (_.GetUnitOfTimeKind() == UnitOfTimeKind.Fiscal) && (!_.HasComponentWithUnboundedGranularity()) && (_.GetUnitOfTimeGranularity() == UnitOfTimeGranularity.Quarter));

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="FiscalYear"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyFiscalYearReportingPeriod()
        {
            var result = A.Dummy<ReportingPeriod>().Whose(_ => (_.GetUnitOfTimeKind() == UnitOfTimeKind.Fiscal) && (!_.HasComponentWithUnboundedGranularity()) && (_.GetUnitOfTimeGranularity() == UnitOfTimeGranularity.Year));

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="FiscalUnbounded"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyFiscalUnboundedReportingPeriod()
        {
            var result = new ReportingPeriod(new FiscalUnbounded(), new FiscalUnbounded());

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="GenericMonth"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyGenericMonthReportingPeriod()
        {
            var result = A.Dummy<ReportingPeriod>().Whose(_ => (_.GetUnitOfTimeKind() == UnitOfTimeKind.Generic) && (!_.HasComponentWithUnboundedGranularity()) && (_.GetUnitOfTimeGranularity() == UnitOfTimeGranularity.Month));

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="GenericQuarter"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyGenericQuarterReportingPeriod()
        {
            var result = A.Dummy<ReportingPeriod>().Whose(_ => (_.GetUnitOfTimeKind() == UnitOfTimeKind.Generic) && (!_.HasComponentWithUnboundedGranularity()) && (_.GetUnitOfTimeGranularity() == UnitOfTimeGranularity.Quarter));

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="GenericYear"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyGenericYearReportingPeriod()
        {
            var result = A.Dummy<ReportingPeriod>().Whose(_ => (_.GetUnitOfTimeKind() == UnitOfTimeKind.Generic) && (!_.HasComponentWithUnboundedGranularity()) && (_.GetUnitOfTimeGranularity() == UnitOfTimeGranularity.Year));

            return result;
        }

        /// <summary>
        /// Gets a dummy reporting period where <see cref="ReportingPeriod.Start"/> and <see cref="ReportingPeriod.End"/> are both a <see cref="GenericUnbounded"/>.
        /// </summary>
        /// <returns>
        /// The reporting period.
        /// </returns>
        public static ReportingPeriod GetDummyGenericUnboundedReportingPeriod()
        {
            var result = new ReportingPeriod(new GenericUnbounded(), new GenericUnbounded());

            return result;
        }
    }
}
