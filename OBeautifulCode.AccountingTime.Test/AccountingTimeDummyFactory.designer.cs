// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.85.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.AccountingTime.Test
{
    using global::System;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;

    using global::FakeItEasy;

    using global::OBeautifulCode.AccountingTime;
    using global::OBeautifulCode.AutoFakeItEasy;

    /// <summary>
    /// The default (code generated) Dummy Factory.
    /// Derive from this class to add any overriding or custom registrations.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.85.0")]
#if !OBeautifulCodeAccountingTimeSolution
    internal
#else
    public
#endif 
    abstract class DefaultAccountingTimeDummyFactory : IDummyFactory
    {
        public DefaultAccountingTimeDummyFactory()
        {

            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<AccountingPeriodSystem>();

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CalendarYearAccountingPeriodSystem());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new FiftyTwoFiftyThreeWeekAccountingPeriodSystem(
                                 A.Dummy<DayOfWeek>(),
                                 A.Dummy<MonthOfYear>(),
                                 A.Dummy<FiftyTwoFiftyThreeWeekMethodology>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new FiscalYearAccountingPeriodSystem(
                                 A.Dummy<MonthOfYear>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ReportingPeriod(
                                 A.Dummy<UnitOfTime>(),
                                 A.Dummy<UnitOfTime>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CalendarDay(
                                 A.Dummy<int>(),
                                 A.Dummy<MonthOfYear>(),
                                 A.Dummy<DayOfMonth>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CalendarMonth(
                                 A.Dummy<int>(),
                                 A.Dummy<MonthOfYear>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CalendarQuarter(
                                 A.Dummy<int>(),
                                 A.Dummy<QuarterNumber>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CalendarUnbounded());


            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<CalendarUnitOfTime>();

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CalendarYear(
                                 A.Dummy<int>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new FiscalMonth(
                                 A.Dummy<int>(),
                                 A.Dummy<MonthNumber>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new FiscalQuarter(
                                 A.Dummy<int>(),
                                 A.Dummy<QuarterNumber>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new FiscalUnbounded());


            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<FiscalUnitOfTime>();

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new FiscalYear(
                                 A.Dummy<int>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GenericMonth(
                                 A.Dummy<int>(),
                                 A.Dummy<MonthNumber>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GenericQuarter(
                                 A.Dummy<int>(),
                                 A.Dummy<QuarterNumber>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GenericUnbounded());


            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<GenericUnitOfTime>();

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GenericYear(
                                 A.Dummy<int>()));


            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<UnitOfTime>();
        }

        /// <inheritdoc />
        public Priority Priority => new FakeItEasy.Priority(1);

        /// <inheritdoc />
        public bool CanCreate(Type type)
        {
            return false;
        }

        /// <inheritdoc />
        public object Create(Type type)
        {
            return null;
        }
    }
}