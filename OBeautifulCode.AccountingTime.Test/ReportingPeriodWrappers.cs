// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ReportingPeriodWrappers.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.AccountingTime.Test source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.AccountingTime.Test
{
    using global::System;

    using OBeautifulCode.Assertion.Recipes;

    /// <summary>
    /// Wraps a reporting period.
    /// </summary>
    /// <remarks>
    /// In the future, for the concrete <see cref="UnitOfTime"/> types we could introduce the follow two variations.
    /// Noting here because we like discussed and like this naming convention:
    /// SemiBoundedCalendarMonthReportingPeriod - either start or end is unbounded and the other is a CalendarMonth
    /// SometimesUnboundedCalendarMonthReportingPeriod - CalendarMonthReportingPeriod || SemiBoundedCalendarMonthReportingPeriod.
    /// </remarks>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    abstract class ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingPeriodWrapper"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        protected ReportingPeriodWrapper(
            UnitOfTime start,
            UnitOfTime end)
        {
            var reportingPeriod = new ReportingPeriod(start, end);

            this.ReportingPeriod = reportingPeriod;
        }

        /// <summary>
        /// Gets the wrapped reporting period.
        /// </summary>
        public ReportingPeriod ReportingPeriod { get; }

        /// <summary>
        /// Performs an implicit conversion from a <see cref="GenericMonthReportingPeriod"/> to a <see cref="ReportingPeriod"/>.
        /// </summary>
        /// <param name="from">The <see cref="GenericMonthReportingPeriod"/> to convert from.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static implicit operator ReportingPeriod(
            ReportingPeriodWrapper from)
        {
            var result = ToReportingPeriod(from);

            return result;
        }

        public static ReportingPeriod ToReportingPeriod(
            ReportingPeriodWrapper from)
        {
            var result = from?.ReportingPeriod;

            return result;
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both bounded.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class BoundedReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoundedReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public BoundedReportingPeriod(
            UnitOfTime start,
            UnitOfTime end)
            : base(start, end)
        {
            new { start }.AsArg().Must().NotBeAssignableToType<IAmUnboundedTime>();
            new { end }.AsArg().Must().NotBeAssignableToType<IAmUnboundedTime>();
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="GenericUnitOfTime"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
        class GenericReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenericReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public GenericReportingPeriod(
            GenericUnitOfTime start,
            GenericUnitOfTime end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="GenericUnitOfTime"/> and both bounded.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
        class BoundedGenericReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoundedGenericReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public BoundedGenericReportingPeriod(
            GenericUnitOfTime start,
            GenericUnitOfTime end)
            : base(start, end)
        {
            new { start }.AsArg().Must().NotBeOfType<GenericUnbounded>();
            new { end }.AsArg().Must().NotBeOfType<GenericUnbounded>();
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="GenericUnitOfTime"/> and one, but not both, are unbounded.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class SemiBoundedGenericReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SemiBoundedGenericReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public SemiBoundedGenericReportingPeriod(
            GenericUnitOfTime start,
            GenericUnitOfTime end)
            : base(start, end)
        {
            var startIsUnbounded = start is GenericUnbounded;
            var endIsUnbounded = end is GenericUnbounded;

            if (startIsUnbounded || endIsUnbounded)
            {
                if (startIsUnbounded && endIsUnbounded)
                {
                    throw new ArgumentException("one and only one of start and end must be unbounded");
                }
            }
            else
            {
                throw new ArgumentException("one and only one of start and end must be unbounded");
            }
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="GenericMonth"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class GenericMonthReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenericMonthReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public GenericMonthReportingPeriod(
            GenericMonth start,
            GenericMonth end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="GenericQuarter"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class GenericQuarterReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenericQuarterReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public GenericQuarterReportingPeriod(
            GenericQuarter start,
            GenericQuarter end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="GenericYear"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class GenericYearReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenericYearReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public GenericYearReportingPeriod(
            GenericYear start,
            GenericYear end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="GenericUnbounded"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class GenericUnboundedReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenericUnboundedReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public GenericUnboundedReportingPeriod(
            GenericUnbounded start,
            GenericUnbounded end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="FiscalUnitOfTime"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
        class FiscalReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FiscalReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public FiscalReportingPeriod(
            FiscalUnitOfTime start,
            FiscalUnitOfTime end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="FiscalUnitOfTime"/> and both bounded.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
        class BoundedFiscalReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoundedFiscalReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public BoundedFiscalReportingPeriod(
            FiscalUnitOfTime start,
            FiscalUnitOfTime end)
            : base(start, end)
        {
            new { start }.AsArg().Must().NotBeOfType<FiscalUnbounded>();
            new { end }.AsArg().Must().NotBeOfType<FiscalUnbounded>();
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="FiscalUnitOfTime"/> and one, but not both, are unbounded.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class SemiBoundedFiscalReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SemiBoundedFiscalReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public SemiBoundedFiscalReportingPeriod(
            FiscalUnitOfTime start,
            FiscalUnitOfTime end)
            : base(start, end)
        {
            var startIsUnbounded = start is FiscalUnbounded;
            var endIsUnbounded = end is FiscalUnbounded;

            if (startIsUnbounded || endIsUnbounded)
            {
                if (startIsUnbounded && endIsUnbounded)
                {
                    throw new ArgumentException("one and only one of start and end must be unbounded");
                }
            }
            else
            {
                throw new ArgumentException("one and only one of start and end must be unbounded");
            }
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="FiscalMonth"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class FiscalMonthReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FiscalMonthReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public FiscalMonthReportingPeriod(
            FiscalMonth start,
            FiscalMonth end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="FiscalQuarter"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class FiscalQuarterReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FiscalQuarterReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public FiscalQuarterReportingPeriod(
            FiscalQuarter start,
            FiscalQuarter end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="FiscalYear"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class FiscalYearReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FiscalYearReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public FiscalYearReportingPeriod(
            FiscalYear start,
            FiscalYear end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="FiscalUnbounded"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class FiscalUnboundedReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FiscalUnboundedReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public FiscalUnboundedReportingPeriod(
            FiscalUnbounded start,
            FiscalUnbounded end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="CalendarUnitOfTime"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class CalendarReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public CalendarReportingPeriod(
            CalendarUnitOfTime start,
            CalendarUnitOfTime end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="CalendarUnitOfTime"/> and both bounded.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class BoundedCalendarReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoundedCalendarReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public BoundedCalendarReportingPeriod(
            CalendarUnitOfTime start,
            CalendarUnitOfTime end)
            : base(start, end)
        {
            new { start }.AsArg().Must().NotBeOfType<CalendarUnbounded>();
            new { end }.AsArg().Must().NotBeOfType<CalendarUnbounded>();
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="CalendarUnitOfTime"/> and one, but not both, are unbounded.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class SemiBoundedCalendarReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SemiBoundedCalendarReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public SemiBoundedCalendarReportingPeriod(
            CalendarUnitOfTime start,
            CalendarUnitOfTime end)
            : base(start, end)
        {
            var startIsUnbounded = start is CalendarUnbounded;
            var endIsUnbounded = end is CalendarUnbounded;

            if (startIsUnbounded || endIsUnbounded)
            {
                if (startIsUnbounded && endIsUnbounded)
                {
                    throw new ArgumentException("one and only one of start and end must be unbounded");
                }
            }
            else
            {
                throw new ArgumentException("one and only one of start and end must be unbounded");
            }
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="CalendarDay"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
        class CalendarDayReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarDayReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public CalendarDayReportingPeriod(
            CalendarDay start,
            CalendarDay end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="CalendarMonth"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class CalendarMonthReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarMonthReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public CalendarMonthReportingPeriod(
            CalendarMonth start,
            CalendarMonth end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="CalendarQuarter"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class CalendarQuarterReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarQuarterReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public CalendarQuarterReportingPeriod(
            CalendarQuarter start,
            CalendarQuarter end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="CalendarYear"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class CalendarYearReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarYearReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public CalendarYearReportingPeriod(
            CalendarYear start,
            CalendarYear end)
            : base(start, end)
        {
        }
    }

    /// <summary>
    /// Wraps a reporting period where the start and the end of the reporting period are both a <see cref="CalendarUnbounded"/>.
    /// </summary>
#if !OBeautifulCodeAccountingTimeSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.AccountingTime.Test", "See package version number")]
    internal
#else
    public
#endif
    class CalendarUnboundedReportingPeriod : ReportingPeriodWrapper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarUnboundedReportingPeriod"/> class.
        /// </summary>
        /// <param name="start">The start of the reporting period.</param>
        /// <param name="end">The end of the reporting period.</param>
        public CalendarUnboundedReportingPeriod(
            CalendarUnbounded start,
            CalendarUnbounded end)
            : base(start, end)
        {
        }
    }
}
